import React, { useEffect, useState, createContext } from 'react';
import Router from './routes/Router';
import styled from 'styled-components';
import { handleAuthStateChange, supabase } from './utils/supabase';
import { UnreadMessagesProvider } from './contexts/UnreadMessagesContext';
import { NotificationProvider, useNotifications } from './contexts/NotificationContext';
import MessageNotification from './components/common/MessageNotification';

// Context ÏÉùÏÑ±: ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê IDÎ•º Ï†ÑÏó≠ÏúºÎ°ú Í≥µÏú†
export const CurrentUserContext = createContext(null);

// Ï†ÑÏó≠ ÏïåÎ¶º Ïª¥Ìè¨ÎÑåÌä∏
const GlobalNotificationWrapper = () => {
  const { 
    notifications, 
    setUser, 
    startMessageNotificationSubscription, 
    stopMessageNotificationSubscription,
    handleNotificationClick,
    removeNotification 
  } = useNotifications();

  useEffect(() => {
    // localStorageÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const storedUser = localStorage.getItem('currentUser');
    
    if (storedUser) {
      try {
        const user = JSON.parse(storedUser);
        console.log('üîî Ï†ÑÏó≠ ÏïåÎ¶º ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî:', user.nickname);
        setUser(user);
        
        // Ï†ÑÏó≠ Î©îÏãúÏßÄ ÏïåÎ¶º Íµ¨ÎèÖ ÏãúÏûë
        const notificationChannel = startMessageNotificationSubscription();
        
        return () => {
          stopMessageNotificationSubscription(notificationChannel);
        };
      } catch (error) {
        console.error('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌååÏã± Ïò§Î•ò:', error);
      }
    }
  }, [setUser, startMessageNotificationSubscription, stopMessageNotificationSubscription]);

  return (
    <MessageNotification
      notifications={notifications}
      onClose={removeNotification}
      onClick={handleNotificationClick}
    />
  );
};

function App() {
  const [currentUserId, setCurrentUserId] = useState(null);

  useEffect(() => {
    let unsubscribe = () => {};

    // Auth ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
    const setupAuthListener = async () => {
      const { data } = await supabase.auth.onAuthStateChange(async (event, session) => {
        console.log('üîµ App.jsx - Auth ÏÉÅÌÉú Î≥ÄÍ≤Ω:', event);
        
        // Î°úÍ∑∏ÏïÑÏõÉ Ïãú localStorage Ï†ïÎ¶¨
        if (event === 'SIGNED_OUT') {
          console.log('üîµ App.jsx - Î°úÍ∑∏ÏïÑÏõÉ Í∞êÏßÄ, localStorage Ï†ïÎ¶¨');
          localStorage.removeItem('currentUser');
          localStorage.removeItem('hasShownLoginModal'); // Î°úÍ∑∏Ïù∏ Î™®Îã¨ ÌëúÏãú ÌîåÎûòÍ∑∏ Ï†úÍ±∞
          sessionStorage.removeItem('socialLoginSuccess');
          sessionStorage.removeItem('loginMethod');
          setCurrentUserId(null);
        }

        // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú localStorage ÏóÖÎç∞Ïù¥Ìä∏
        if ((event === 'SIGNED_IN' || event === 'INITIAL_SESSION') && session?.user) {
          console.log('üîµ App.jsx - Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Í∞êÏßÄ, ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏');

          // Î°úÍ∑∏Ïù∏ Î∞©Î≤ï ÌôïÏù∏
          const loginProvider = session.user.app_metadata?.provider || 'email';
          const isSocialLogin = loginProvider !== 'email';

          // SIGNED_IN Ïù¥Î≤§Ìä∏Îäî ÏÉàÎ°úÏö¥ Î°úÍ∑∏Ïù∏ ÏãúÏóêÎßå Î∞úÏÉù
          if (event === 'SIGNED_IN') {
            // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌîåÎûòÍ∑∏ Ï†ÄÏû• (Î°úÍ∑∏Ïù∏ Î∞©Î≤ï Íµ¨Î∂Ñ)
            sessionStorage.setItem('socialLoginSuccess', 'true');
            sessionStorage.setItem('loginMethod', loginProvider);
            console.log(`‚úÖ App.jsx - ${loginProvider} Î°úÍ∑∏Ïù∏ ÏôÑÎ£å ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï`);
          }

          // Î®ºÏ†Ä Í∏∞Î≥∏ Ï†ïÎ≥¥Î°ú Îπ†Î•¥Í≤å Ï†ÄÏû•
          const basicSession = {
            id: session.user.id,
            email: session.user.email,
            nickname: session.user.email?.split('@')[0] || 'ÏÇ¨Ïö©Ïûê'
          };
          localStorage.setItem('currentUser', JSON.stringify(basicSession));
          setCurrentUserId(session.user.id);
          console.log('‚úÖ App.jsx - Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï†ÄÏû• ÏôÑÎ£å (Ï¶âÏãú)');

          // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (ÎπÑÏ∞®Îã®)
          supabase
            .from('users')
            .select('*')
            .eq('id', session.user.id)
            .single()
            .then(({ data: userData, error: userError }) => {
              if (userData && !userError) {
                const userSession = {
                  id: userData.id,
                  email: userData.email,
                  nickname: userData.nickname
                };
                localStorage.setItem('currentUser', JSON.stringify(userSession));
                setCurrentUserId(userData.id);
                console.log('‚úÖ App.jsx - ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å (Î∞±Í∑∏ÎùºÏö¥Îìú)');
              } else {
                console.warn('‚ö†Ô∏è App.jsx - ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®, Í∏∞Î≥∏ Ï†ïÎ≥¥ Ïú†ÏßÄ');
              }
            })
            .catch(error => {
              console.warn('‚ö†Ô∏è App.jsx - ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïò§Î•ò, Í∏∞Î≥∏ Ï†ïÎ≥¥ Ïú†ÏßÄ:', error.message);
            });
        }
      });

      unsubscribe = () => {
        if (data?.subscription?.unsubscribe) {
          data.subscription.unsubscribe();
        }
      };
    };

    setupAuthListener();

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Íµ¨ÎèÖ Ìï¥Ï†ú
    return () => {
      unsubscribe();
    };
  }, []);

  return (
    <CurrentUserContext.Provider value={currentUserId}>
      <UnreadMessagesProvider>
        <NotificationProvider>
          <AppContainer>
            <Router />
          </AppContainer>
          <GlobalNotificationWrapper />
        </NotificationProvider>
      </UnreadMessagesProvider>
    </CurrentUserContext.Provider>
  );
}

const AppContainer = styled.div`
  width: 100%;
  height: 100vh;
  position: relative;
  overflow-y: auto;
  overflow-x: hidden;
  background: #ffffff;
`;

export default App;